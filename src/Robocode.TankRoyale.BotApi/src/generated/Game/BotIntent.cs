//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Robocode.TankRoyale.Schema.Game
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// The intent (request) sent from a bot each turn for controlling the bot and provide the server with data.
    /// <br/>A field only needs to be set, if the value must be changed. Otherwise the server will use the field value from the
    /// <br/>last time the field was set.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public class BotIntent : Message
    {
        /// <summary>
        /// Turn rate of the body in degrees per turn (can be positive and negative)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("turnRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TurnRate { get; set; }

        /// <summary>
        /// Turn rate of the gun in degrees per turn (can be positive and negative)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gunTurnRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GunTurnRate { get; set; }

        /// <summary>
        /// Turn rate of the radar in degrees per turn (can be positive and negative)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("radarTurnRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RadarTurnRate { get; set; }

        /// <summary>
        /// New target speed in units per turn (can be positive and negative)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetSpeed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TargetSpeed { get; set; }

        /// <summary>
        /// Attempt to fire gun with the specified firepower
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firepower", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, 3.0D)]
        public double? Firepower { get; set; }

        /// <summary>
        /// Flag indicating if the gun must be adjusted to compensate for the body turn. Default is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("adjustGunForBodyTurn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AdjustGunForBodyTurn { get; set; }

        /// <summary>
        /// Flag indicating if the radar must be adjusted to compensate for the body turn. Default is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("adjustRadarForBodyTurn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AdjustRadarForBodyTurn { get; set; }

        /// <summary>
        /// Flag indicating if the radar must be adjusted to compensate for the gun turn. Default is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("adjustRadarForGunTurn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AdjustRadarForGunTurn { get; set; }

        /// <summary>
        /// Flag indicating if the bot should rescan with previous radar direction and scan sweep angle.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rescan", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Rescan { get; set; }

        /// <summary>
        /// Flag indication if fire assistance is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fireAssist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FireAssist { get; set; }

        /// <summary>
        /// New color of the body
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bodyColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"/(?i)^#([0-9A-F]{3}|[0-9A-F]{6})$/ig")]
        public string BodyColor { get; set; }

        /// <summary>
        /// New color of the cannon turret
        /// </summary>
        [Newtonsoft.Json.JsonProperty("turretColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"/(?i)^#([0-9A-F]{3}|[0-9A-F]{6})$/ig")]
        public string TurretColor { get; set; }

        /// <summary>
        /// New color of the radar
        /// </summary>
        [Newtonsoft.Json.JsonProperty("radarColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"/(?i)^#([0-9A-F]{3}|[0-9A-F]{6})$/ig")]
        public string RadarColor { get; set; }

        /// <summary>
        /// New color of the bullet. Note. This will be the color of a bullet when it is fired
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bulletColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"/(?i)^#([0-9A-F]{3}|[0-9A-F]{6})$/ig")]
        public string BulletColor { get; set; }

        /// <summary>
        /// New color of the scan arc
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scanColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"/(?i)^#([0-9A-F]{3}|[0-9A-F]{6})$/ig")]
        public string ScanColor { get; set; }

        /// <summary>
        /// New color of the tracks
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tracksColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"/(?i)^#([0-9A-F]{3}|[0-9A-F]{6})$/ig")]
        public string TracksColor { get; set; }

        /// <summary>
        /// New color of the gun
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gunColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"/(?i)^#([0-9A-F]{3}|[0-9A-F]{6})$/ig")]
        public string GunColor { get; set; }

        /// <summary>
        /// New text received from standard output (stdout)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stdOut", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StdOut { get; set; }

        /// <summary>
        /// New text received from standard error (stderr)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stdErr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StdErr { get; set; }

        /// <summary>
        /// Messages to send to one or more individual teammates or broadcast to the entire team
        /// </summary>
        [Newtonsoft.Json.JsonProperty("teamMessages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<TeamMessage> TeamMessages { get; set; }

        /// <summary>
        /// Debug graphics to draw on the screen
        /// </summary>
        [Newtonsoft.Json.JsonProperty("debugGraphics", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DebugGraphics { get; set; }


    }
}