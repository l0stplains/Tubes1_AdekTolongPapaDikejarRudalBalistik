//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Robocode.TankRoyale.Schema.Game
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Current state of a bot, but without an id that must be kept secret from opponent bots
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public class BotState
    {
        /// <summary>
        /// Flag specifying if the bot is a Droid (team bot with 120 energy, but no scanner)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDroid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDroid { get; set; }

        /// <summary>
        /// Energy level
        /// </summary>
        [Newtonsoft.Json.JsonProperty("energy", Required = Newtonsoft.Json.Required.Always)]
        public double Energy { get; set; }

        /// <summary>
        /// X coordinate
        /// </summary>
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Always)]
        public double X { get; set; }

        /// <summary>
        /// Y coordinate
        /// </summary>
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Always)]
        public double Y { get; set; }

        /// <summary>
        /// Driving direction in degrees
        /// </summary>
        [Newtonsoft.Json.JsonProperty("direction", Required = Newtonsoft.Json.Required.Always)]
        public double Direction { get; set; }

        /// <summary>
        /// Gun direction in degrees
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gunDirection", Required = Newtonsoft.Json.Required.Always)]
        public double GunDirection { get; set; }

        /// <summary>
        /// Radar direction in degrees
        /// </summary>
        [Newtonsoft.Json.JsonProperty("radarDirection", Required = Newtonsoft.Json.Required.Always)]
        public double RadarDirection { get; set; }

        /// <summary>
        /// Radar sweep angle in degrees, i.e. angle between previous and current radar direction
        /// </summary>
        [Newtonsoft.Json.JsonProperty("radarSweep", Required = Newtonsoft.Json.Required.Always)]
        public double RadarSweep { get; set; }

        /// <summary>
        /// Speed measured in units per turn
        /// </summary>
        [Newtonsoft.Json.JsonProperty("speed", Required = Newtonsoft.Json.Required.Always)]
        public double Speed { get; set; }

        /// <summary>
        /// Turn rate of the body in degrees per turn (can be positive and negative)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("turnRate", Required = Newtonsoft.Json.Required.Always)]
        public double TurnRate { get; set; }

        /// <summary>
        /// Turn rate of the gun in degrees per turn (can be positive and negative)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gunTurnRate", Required = Newtonsoft.Json.Required.Always)]
        public double GunTurnRate { get; set; }

        /// <summary>
        /// Turn rate of the radar in degrees per turn (can be positive and negative)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("radarTurnRate", Required = Newtonsoft.Json.Required.Always)]
        public double RadarTurnRate { get; set; }

        /// <summary>
        /// Gun heat
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gunHeat", Required = Newtonsoft.Json.Required.Always)]
        public double GunHeat { get; set; }

        /// <summary>
        /// Number of enemy bots left in the current round
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enemyCount", Required = Newtonsoft.Json.Required.Always)]
        public int EnemyCount { get; set; }

        /// <summary>
        /// Current RGB color of the body, if changed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bodyColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"/(?i)^#([0-9A-F]{3}|[0-9A-F]{6})$/ig")]
        public string BodyColor { get; set; }

        /// <summary>
        /// New color of the gun turret, if changed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("turretColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"/(?i)^#([0-9A-F]{3}|[0-9A-F]{6})$/ig")]
        public string TurretColor { get; set; }

        /// <summary>
        /// New color of the radar, if changed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("radarColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"/(?i)^#([0-9A-F]{3}|[0-9A-F]{6})$/ig")]
        public string RadarColor { get; set; }

        /// <summary>
        /// New color of the bullets, if changed. Note that bullets that has already been fired should not change colors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bulletColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"/(?i)^#([0-9A-F]{3}|[0-9A-F]{6})$/ig")]
        public string BulletColor { get; set; }

        /// <summary>
        /// New color of the scan arc, if changed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scanColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"/(?i)^#([0-9A-F]{3}|[0-9A-F]{6})$/ig")]
        public string ScanColor { get; set; }

        /// <summary>
        /// New color of the tracks, if changed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tracksColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"/(?i)^#([0-9A-F]{3}|[0-9A-F]{6})$/ig")]
        public string TracksColor { get; set; }

        /// <summary>
        /// New color of gun, if changed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gunColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"/(?i)^#([0-9A-F]{3}|[0-9A-F]{6})$/ig")]
        public string GunColor { get; set; }

        /// <summary>
        /// Flag specifying if the bot is allowed to use debugging features
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDebuggingEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDebuggingEnabled { get; set; }


    }
}