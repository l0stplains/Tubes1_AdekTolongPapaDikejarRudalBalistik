//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Robocode.TankRoyale.Schema.Game
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Bot participating in a battle
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.0.2.0 (Newtonsoft.Json v13.0.0.0)")]
    public class Participant
    {
        /// <summary>
        /// Id of the bot participating in a battle
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>
        /// Unique session id that must match the session id received from the server handshake
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sessionId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SessionId { get; set; }

        /// <summary>
        /// Name of bot, e.g. Killer Bee
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength = 1)]
        public string Name { get; set; }

        /// <summary>
        /// Bot version, e.g. 1.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        public string Version { get; set; }

        /// <summary>
        /// Name of authors, e.g. John Doe &lt;john_doe@somewhere.net&gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MaxLength(5)]
        public System.Collections.Generic.ICollection<string> Authors { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// Short description of the bot, preferable a one-liner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string Description { get; set; }

        /// <summary>
        /// URL to a home page for the bot
        /// </summary>
        [Newtonsoft.Json.JsonProperty("homepage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string Homepage { get; set; }

        /// <summary>
        /// 2-letter country code(s) defined by ISO 3166-1, e.g. "GB"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CountryCodes { get; set; }

        /// <summary>
        /// Game types supported by this bot (defined elsewhere), e.g. "classic", "melee" and "1v1"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gameTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<string> GameTypes { get; set; }

        /// <summary>
        /// Platform used for running the bot, e.g. JVM 17 or .NET 5
        /// </summary>
        [Newtonsoft.Json.JsonProperty("platform", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Platform { get; set; }

        /// <summary>
        /// Language used for programming the bot, e.g. Java 17 or C# 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty("programmingLang", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string ProgrammingLang { get; set; }

        /// <summary>
        /// Initial start position of the bot used for debugging
        /// </summary>
        [Newtonsoft.Json.JsonProperty("initialPosition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InitialPosition InitialPosition { get; set; }

        /// <summary>
        /// Id of the team that this bot is a member of
        /// </summary>
        [Newtonsoft.Json.JsonProperty("teamId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TeamId { get; set; }

        /// <summary>
        /// Name of the team that this bot is a member of, e.g. Killer Bees
        /// </summary>
        [Newtonsoft.Json.JsonProperty("teamName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength = 1)]
        public string TeamName { get; set; }

        /// <summary>
        /// Team version, e.g. 1.0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("teamVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        public string TeamVersion { get; set; }

        /// <summary>
        /// Flag specifying if the bot is a Droid (team bot with 120 energy, but no scanner)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDroid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDroid { get; set; }


    }
}